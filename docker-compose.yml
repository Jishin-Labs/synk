name: synk

services:
  postgres:
    image: postgres:16-alpine
    container_name: synk-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-synk}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - synk_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-synk}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - synk-network

  mailpit:
    image: axllent/mailpit:latest
    container_name: synk-mailpit
    environment:
      MP_UI_AUTH: ${MAILPIT_AUTH:-}
      MP_MAX_MESSAGES: ${MAILPIT_MAX_MESSAGES:-500}
    ports:
      - "${MAILPIT_SMTP_PORT:-1025}:1025"
      - "${MAILPIT_UI_PORT:-8025}:8025"
    restart: unless-stopped
    networks:
      - synk-network

  minio:
    image: minio/minio:latest
    container_name: synk-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-synk}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-synk-secret}
      MINIO_BROWSER_REDIRECT_URL: ${MINIO_CONSOLE_URL:-http://localhost:9001}
    ports:
      - "${MINIO_API_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - synk_minio_data:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - synk-network

  minio-setup:
    image: minio/mc:latest
    container_name: synk-minio-setup
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set local http://minio:9000 ${MINIO_ROOT_USER:-synk} ${MINIO_ROOT_PASSWORD:-synk-secret} &&
      mc mb -p local/${S3_BUCKET:-synk-bucket} || true &&
      mc anonymous set ${MINIO_BUCKET_POLICY:-download} local/${S3_BUCKET:-synk-bucket} || true &&
      echo 'MinIO bucket setup completed successfully'
      "
    restart: "no"
    networks:
      - synk-network

  server:
    image: node:20-alpine
    container_name: synk-server
    working_dir: /app
    command: sh -c "corepack enable pnpm && pnpm i --frozen-lockfile --prefer-offline && pnpm dev"
    ports:
      - "${SERVER_PORT:-8787}:8787"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: 8787
      DATABASE_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-synk}

      SMTP_HOST: mailpit
      SMTP_PORT: 1025
      SMTP_USER: ""
      SMTP_PASS: ""
      SMTP_FROM: ${SMTP_FROM:-no-reply@synk.local}

      S3_ENDPOINT: http://minio:9000
      S3_REGION: ${S3_REGION:-us-east-1}
      S3_BUCKET: ${S3_BUCKET:-synk-bucket}
      S3_ACCESS_KEY_ID: ${MINIO_ROOT_USER:-synk}
      S3_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD:-synk-secret}
      S3_FORCE_PATH_STYLE: "true"
      S3_PUBLIC_URL: ${S3_PUBLIC_URL:-http://localhost:9000}

      AUTH_SECRET: ${AUTH_SECRET:-dev-secret-change-me}
      AUTH_BASE_URL: ${AUTH_BASE_URL:-http://localhost:8787}
      
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:3000}
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
      minio-setup:
        condition: service_completed_successfully
      mailpit:
        condition: service_started
    volumes:
      - ./:/app:cached
      - /app/node_modules
      - server_pnpm_cache:/root/.local/share/pnpm/store
    restart: unless-stopped
    networks:
      - synk-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8787/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  web:
    image: node:20-alpine
    container_name: synk-web
    working_dir: /app
    command: sh -c "corepack enable pnpm && pnpm i --frozen-lockfile --prefer-offline && pnpm --filter web dev"
    ports:
      - "${WEB_PORT:-3000}:3000"
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      NEXT_TELEMETRY_DISABLED: "1"
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8787}
      NEXT_PUBLIC_STORAGE_BUCKET: ${S3_BUCKET:-synk-bucket}
      NEXT_PUBLIC_MINIO_CONSOLE: ${NEXT_PUBLIC_MINIO_CONSOLE:-http://localhost:9001}
      NEXT_PUBLIC_S3_PUBLIC_URL: ${S3_PUBLIC_URL:-http://localhost:9000}
    depends_on:
      server:
        condition: service_healthy
    volumes:
      - ./:/app:cached
      - /app/node_modules
      - /app/apps/web/.next
      - web_pnpm_cache:/root/.local/share/pnpm/store
    restart: unless-stopped
    networks:
      - synk-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  migrate:
    image: node:20-alpine
    container_name: synk-migrate
    working_dir: /app
    command: sh -c "corepack enable pnpm && pnpm i --frozen-lockfile --prefer-offline && pnpm db:migrate"
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-synk}
      NODE_ENV: ${NODE_ENV:-development}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./:/app:cached
      - /app/node_modules
    profiles: ["tools"]
    networks:
      - synk-network

  seed:
    image: node:20-alpine
    container_name: synk-seed
    working_dir: /app
    command: sh -c "corepack enable pnpm && pnpm i --frozen-lockfile --prefer-offline && pnpm db:seed"
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-synk}
      NODE_ENV: ${NODE_ENV:-development}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./:/app:cached
      - /app/node_modules
    profiles: ["tools"]
    networks:
      - synk-network

networks:
  synk-network:
    driver: bridge

volumes:
  synk_postgres_data:
    driver: local
  synk_minio_data:
    driver: local
  server_pnpm_cache:
    driver: local
  web_pnpm_cache:
    driver: local